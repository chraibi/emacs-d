;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Module parse to/from Excel
\"\"\"" code nil nil [1 35])
            ("os" include nil nil [127 136])
            ("datetime" include nil nil [137 152])
            ("abc" include nil nil [153 163])
            ("numpy" include nil nil [164 182])
            ("pandas.io.parsers" include nil nil [184 224])
            ("pandas.io.common" include nil nil [225 271])
            ("pandas.tseries.period" include nil nil [272 312])
            ("pandas" include nil nil [313 336])
            ("pandas.compat" include nil nil [337 412])
            ("pandas.core" include nil nil [413 443])
            ("pandas.core.common" include nil nil [444 487])
            ("pandas.compat" include nil nil [488 518])
            ("pandas.compat.openpyxl_compat" include nil nil [519 574])
            ("pandas.core.common" include nil nil [575 607])
            ("warnings" include nil nil [608 633])
            ("distutils.version" include nil nil [634 676])
            ("__all__" variable nil nil [678 730])
            ("_writer_extensions" variable nil nil [732 776])
            ("_writers" variable nil nil [777 790])
            ("register_writer" function
               (:documentation "Adds engine to the excel writer registry. You must use this method to
    integrate with ``to_excel``. Also adds config options for any new
    ``supported_extensions`` defined on the writer."
                :arguments 
                  ( ("klass" variable nil (reparse-symbol function_parameters) [813 818]))                  )
                nil [793 1502])
            ("get_writer" function (:arguments 
              ( ("engine_name" variable nil (reparse-symbol function_parameters) [1519 1530]))              ) nil [1504 2134])
            ("read_excel" function
               (:documentation "Read an Excel table into a pandas DataFrame

    Parameters
    ----------
    io : string, file-like object, or xlrd workbook.
        The string could be a URL. Valid URL schemes include http, ftp, s3,
        and file. For file URLs, a host is expected. For instance, a local
        file could be file://localhost/path/to/workbook.xlsx
    sheetname : string, int, mixed list of strings/ints, or None, default 0
        
        Strings are used for sheet names, Integers are used in zero-indexed sheet 
        positions. 
        
        Lists of strings/integers are used to request multiple sheets.
        
        Specify None to get all sheets.
        
        str|int -> DataFrame is returned.
        list|None -> Dict of DataFrames is returned, with keys representing sheets.
               
        Available Cases

        * Defaults to 0 -> 1st sheet as a DataFrame
        * 1 -> 2nd sheet as a DataFrame
        * \"Sheet1\" -> 1st sheet as a DataFrame
        * [0,1,\"Sheet5\"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames
        * None -> All sheets as a dictionary of DataFrames

    header : int, default 0
        Row to use for the column labels of the parsed DataFrame
    skiprows : list-like
        Rows to skip at the beginning (0-indexed)
    skip_footer : int, default 0
        Rows at the end to skip (0-indexed)
    converters : dict, default None
        Dict of functions for converting values in certain columns. Keys can
        either be integers or column labels, values are functions that take one
        input argument, the Excel cell content, and return the transformed
        content.
    index_col : int, default None
        Column to use as the row labels of the DataFrame. Pass None if
        there is no such column
    parse_cols : int or list, default None
        * If None then parse all columns,
        * If int then indicates last column to be parsed
        * If list of ints then indicates list of column numbers to be parsed
        * If string then indicates comma separated list of column names and
          column ranges (e.g. \"A:E\" or \"A,C,E:F\")
    na_values : list-like, default None
        List of additional strings to recognize as NA/NaN
    keep_default_na : bool, default True
        If na_values are specified and keep_default_na is False the default NaN
        values are overridden, otherwise they're appended to
    verbose : boolean, default False
        Indicate number of NA values placed in non-numeric columns
    engine: string, default None
        If io is not a buffer or path, this must be set to identify io.
        Acceptable values are None or xlrd
    convert_float : boolean, default True
        convert integral floats to int (i.e., 1.0 --> 1). If False, all numeric
        data will be read in as floats: Excel stores all numbers as floats
        internally
    has_index_names : boolean, default False
        True if the cols defined in index_col have an index name and are
        not in the header. Index name will be placed on a separate line below
        the header.

    Returns
    -------
    parsed : DataFrame or Dict of DataFrames
        DataFrame from the passed in Excel file.  See notes in sheetname argument
        for more information on when a Dict of Dataframes is returned.

    "
                :arguments 
                  ( ("io" variable nil (reparse-symbol function_parameters) [2151 2153])
                    ("sheetname" variable nil (reparse-symbol function_parameters) [2155 2164])
                    ("kwds" variable nil (reparse-symbol function_parameters) [2168 2174]))                  )
                nil [2136 5802])
            ("ExcelFile" type
               (:documentation "
    Class for parsing tabular excel sheets into DataFrame objects.
    Uses xlrd. See ExcelFile.parse for more documentation

    Parameters
    ----------
    io : string, file-like object or xlrd workbook
        If a string, expected to be a path to xls or xlsx file
    engine: string, default None
        If io is not a buffer or path, this must be set to identify io.
        Acceptable values are None or xlrd
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("xlrd" include nil (reparse-symbol indented_block_body) [6308 6319])
                            ("ver" variable nil (reparse-symbol indented_block_body) [6367 6421])
                            ("if" code nil (reparse-symbol indented_block_body) [6430 6618])
                            ("self" variable nil (reparse-symbol indented_block_body) [6627 6639])
                            ("engine" variable nil (reparse-symbol indented_block_body) [6649 6682])
                            ("if" code nil (reparse-symbol indented_block_body) [6692 6796])
                            ("if" code nil (reparse-symbol indented_block_body) [6805 7500]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6280 6284])
                            ("io" variable nil (reparse-symbol function_parameters) [6286 6288])
                            ("kwds" variable nil (reparse-symbol function_parameters) [6290 6296]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6267 7500])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7515 7519])
                            ("sheetname" variable nil (reparse-symbol function_parameters) [7521 7530])
                            ("header" variable nil (reparse-symbol function_parameters) [7534 7540])
                            ("skiprows" variable nil (reparse-symbol function_parameters) [7544 7552])
                            ("skip_footer" variable nil (reparse-symbol function_parameters) [7559 7570])
                            ("index_col" variable nil (reparse-symbol function_parameters) [7588 7597])
                            ("parse_cols" variable nil (reparse-symbol function_parameters) [7604 7614])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [7621 7632])
                            ("date_parser" variable nil (reparse-symbol function_parameters) [7654 7665])
                            ("na_values" variable nil (reparse-symbol function_parameters) [7672 7681])
                            ("thousands" variable nil (reparse-symbol function_parameters) [7688 7697])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [7704 7713])
                            ("convert_float" variable nil (reparse-symbol function_parameters) [7734 7747])
                            ("has_index_names" variable nil (reparse-symbol function_parameters) [7754 7769])
                            ("converters" variable nil (reparse-symbol function_parameters) [7777 7787])
                            ("kwds" variable nil (reparse-symbol function_parameters) [7794 7800]))                          
                        :documentation "Read an Excel table into DataFrame

        Parameters
        ----------
        sheetname : string, int, mixed list of strings/ints, or None, default 0
            
            Strings are used for sheet names, Integers are used in zero-indexed sheet 
            positions. 
            
            Lists of strings/integers are used to request multiple sheets.
            
            Specify None to get all sheets.
            
            str|int -> DataFrame is returned.
            list|None -> Dict of DataFrames is returned, with keys representing sheets.
                   
            Available Cases
    
            * Defaults to 0 -> 1st sheet as a DataFrame
            * 1 -> 2nd sheet as a DataFrame
            * \"Sheet1\" -> 1st sheet as a DataFrame
            * [0,1,\"Sheet5\"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames
            * None -> All sheets as a dictionary of DataFrames
        header : int, default 0
            Row to use for the column labels of the parsed DataFrame
        skiprows : list-like
            Rows to skip at the beginning (0-indexed)
        skip_footer : int, default 0
            Rows at the end to skip (0-indexed)
        converters : dict, default None
            Dict of functions for converting values in certain columns. Keys can
            either be integers or column labels
        index_col : int, default None
            Column to use as the row labels of the DataFrame. Pass None if
            there is no such column
        parse_cols : int or list, default None
            * If None then parse all columns
            * If int then indicates last column to be parsed
            * If list of ints then indicates list of column numbers to be
              parsed
            * If string then indicates comma separated list of column names and
              column ranges (e.g. \"A:E\" or \"A,C,E:F\")
        parse_dates : boolean, default False
            Parse date Excel values,
        date_parser : function default None
            Date parsing function
        na_values : list-like, default None
            List of additional strings to recognize as NA/NaN
        thousands : str, default None
            Thousands separator
        chunksize : int, default None
            Size of file chunk to read for lazy evaluation.
        convert_float : boolean, default True
            convert integral floats to int (i.e., 1.0 --> 1). If False, all
            numeric data will be read in as floats: Excel stores all numbers as
            floats internally.
        has_index_names : boolean, default False
            True if the cols defined in index_col have an index name and are
            not in the header
        verbose : boolean, default False
            Set to True to print a single statement when reading each
            excel sheet.

        Returns
        -------
        parsed : DataFrame or Dict of DataFrames
            DataFrame from the passed in Excel file.  See notes in sheetname argument
            for more information on when a Dict of Dataframes is returned.
        ")
                        (reparse-symbol indented_block_body) [7505 11766])
                    ("_should_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11789 11793])
                            ("i" variable nil (reparse-symbol function_parameters) [11795 11796])
                            ("parse_cols" variable nil (reparse-symbol function_parameters) [11798 11808]))                          )
                        (reparse-symbol indented_block_body) [11771 12916])
                    ("_parse_excel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12938 12942])
                            ("sheetname" variable nil (reparse-symbol function_parameters) [12944 12953])
                            ("header" variable nil (reparse-symbol function_parameters) [12957 12963])
                            ("skiprows" variable nil (reparse-symbol function_parameters) [12967 12975])
                            ("skip_footer" variable nil (reparse-symbol function_parameters) [12982 12993])
                            ("index_col" variable nil (reparse-symbol function_parameters) [13018 13027])
                            ("has_index_names" variable nil (reparse-symbol function_parameters) [13034 13049])
                            ("parse_cols" variable nil (reparse-symbol function_parameters) [13056 13066])
                            ("parse_dates" variable nil (reparse-symbol function_parameters) [13094 13105])
                            ("date_parser" variable nil (reparse-symbol function_parameters) [13113 13124])
                            ("na_values" variable nil (reparse-symbol function_parameters) [13131 13140])
                            ("thousands" variable nil (reparse-symbol function_parameters) [13168 13177])
                            ("chunksize" variable nil (reparse-symbol function_parameters) [13184 13193])
                            ("convert_float" variable nil (reparse-symbol function_parameters) [13200 13213])
                            ("verbose" variable nil (reparse-symbol function_parameters) [13241 13248])
                            ("kwds" variable nil (reparse-symbol function_parameters) [13256 13262]))                          )
                        (reparse-symbol indented_block_body) [12921 17971])
                    ("sheet_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18015 18019]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17985 18061])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18076 18080]))                          
                        :documentation "close io if necessary")
                        (reparse-symbol indented_block_body) [18066 18185])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18204 18208]))                          )
                        (reparse-symbol indented_block_body) [18190 18231])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18249 18253])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [18255 18263])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [18265 18274])
                            ("traceback" variable nil (reparse-symbol function_parameters) [18276 18285]))                          )
                        (reparse-symbol indented_block_body) [18236 18309]))                  
                :type "class")
                nil [5804 18309])
            ("_trim_excel_header" function (:arguments 
              ( ("row" variable nil (reparse-symbol function_parameters) [18334 18337]))              ) nil [18311 18525])
            ("_conv_value" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [18543 18546]))              ) nil [18527 18844])
            ("" code nil nil [18860 18873])
            ("ExcelWriter" type
               (:documentation "
    Class for writing DataFrame objects into excel sheets, default is to use
    xlwt for xls, openpyxl for xlsx.  See DataFrame.to_excel for typical usage.

    Parameters
    ----------
    path : string
        Path to xls or xlsx file.
    engine : string (optional)
        Engine to use for writing. If None, defaults to
        ``io.excel.<extension>.writer``.  NOTE: can only be passed as a keyword
        argument.
    date_format : string, default None
        Format string for dates written into Excel files (e.g. 'YYYY-MM-DD')
    datetime_format : string, default None
        Format string for datetime objects written into Excel files
        (e.g. 'YYYY-MM-DD HH:MM:SS')
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [20597 20600])
                        ("path" variable nil (reparse-symbol function_parameters) [20602 20606])
                        ("engine" variable nil (reparse-symbol function_parameters) [20608 20614])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [20621 20629]))                      ) (reparse-symbol indented_block_body) [20585 21110])
                    ("book" variable nil (reparse-symbol indented_block_body) [21166 21177])
                    ("curr_sheet" variable nil (reparse-symbol indented_block_body) [21182 21199])
                    ("path" variable nil (reparse-symbol indented_block_body) [21204 21215])
                    ("supported_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21272 21276]))                          
                        :decorators 
                          ( ("abc.abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21221 21341])
                    ("engine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21383 21387]))                          
                        :decorators 
                          ( ("abc.abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21346 21428])
                    ("write_cells" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21473 21477])
                            ("cells" variable nil (reparse-symbol function_parameters) [21479 21484])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [21486 21496])
                            ("startrow" variable nil (reparse-symbol function_parameters) [21503 21511])
                            ("startcol" variable nil (reparse-symbol function_parameters) [21515 21523]))                          
                        :documentation "
        Write given formated cells into Excel an excel sheet

        Parameters
        ----------
        cells : generator
            cell of formated data to save to Excel sheet
        sheet_name : string, default None
            Name of Excel sheet, if None, then use self.cur_sheet
        startrow: upper left cell row to dump data frame
        startcol: upper left cell column to dump data frame
        ")
                        (reparse-symbol indented_block_body) [21433 21973])
                    ("save" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22011 22015]))                          
                        :documentation "
        Save workbook to disk.
        ")
                        (reparse-symbol indented_block_body) [21978 22086])
                    ("__init__" function
                       (:suite 
                          ( ("ext" variable nil (reparse-symbol indented_block_body) [22273 22305])
                            ("self" code nil (reparse-symbol indented_block_body) [22314 22339])
                            ("self" variable nil (reparse-symbol indented_block_body) [22349 22365])
                            ("self" variable nil (reparse-symbol indented_block_body) [22374 22390])
                            ("self" variable nil (reparse-symbol indented_block_body) [22399 22420])
                            ("if" code nil (reparse-symbol indented_block_body) [22430 22555])
                            ("if" code nil (reparse-symbol indented_block_body) [22563 22713]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22104 22108])
                            ("path" variable nil (reparse-symbol function_parameters) [22110 22114])
                            ("engine" variable nil (reparse-symbol function_parameters) [22116 22122])
                            ("date_format" variable nil (reparse-symbol function_parameters) [22146 22157])
                            ("datetime_format" variable nil (reparse-symbol function_parameters) [22164 22179])
                            ("engine_kwargs" variable nil (reparse-symbol function_parameters) [22186 22201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22091 22713])
                    ("_get_sheet_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22738 22742])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [22744 22754]))                          )
                        (reparse-symbol indented_block_body) [22718 23025])
                    ("check_extension" function
                       (:documentation "checks that path's extension against the Writer's supported
        extensions.  If it isn't supported, raises UnsupportedFiletypeError."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23067 23070])
                            ("ext" variable nil (reparse-symbol function_parameters) [23072 23075]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23030 23571])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23626 23630]))                          )
                        (reparse-symbol indented_block_body) [23612 23653])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23671 23675])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [23677 23685])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [23687 23696])
                            ("traceback" variable nil (reparse-symbol function_parameters) [23698 23707]))                          )
                        (reparse-symbol indented_block_body) [23658 23731])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23746 23750]))                          
                        :documentation "synonym for save, to make it more file-like")
                        (reparse-symbol indented_block_body) [23736 23838]))                  
                :type "class")
                nil [18874 23838])
            ("_Openpyxl1Writer" type
               (:superclasses ("ExcelWriter")
                :members 
                  ( ("engine" variable nil (reparse-symbol indented_block_body) [23881 23901])
                    ("supported_extensions" variable nil (reparse-symbol indented_block_body) [23906 23947])
                    ("openpyxl_majorver" variable nil (reparse-symbol indented_block_body) [23952 23973])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [24043 24299])
                            ("openpyxl.workbook" include nil (reparse-symbol indented_block_body) [24362 24400])
                            ("super" code nil (reparse-symbol indented_block_body) [24410 24471])
                            ("self" variable nil (reparse-symbol indented_block_body) [24549 24571])
                            ("if" code nil (reparse-symbol indented_block_body) [24639 24724]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23992 23996])
                            ("path" variable nil (reparse-symbol function_parameters) [23998 24002])
                            ("engine" variable nil (reparse-symbol function_parameters) [24004 24010])
                            ("engine_kwargs" variable nil (reparse-symbol function_parameters) [24017 24032]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23979 24724])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24738 24742]))                          
                        :documentation "
        Save workbook to disk.
        ")
                        (reparse-symbol indented_block_body) [24729 24841])
                    ("write_cells" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24862 24866])
                            ("cells" variable nil (reparse-symbol function_parameters) [24868 24873])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [24875 24885])
                            ("startrow" variable nil (reparse-symbol function_parameters) [24892 24900])
                            ("startcol" variable nil (reparse-symbol function_parameters) [24904 24912]))                          )
                        (reparse-symbol indented_block_body) [24846 27602])
                    ("_convert_to_style" function
                       (:documentation "
        converts a style_dict to an openpyxl style object
        Parameters
        ----------
        style_dict: style dictionary to convert
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [27646 27649])
                            ("style_dict" variable nil (reparse-symbol function_parameters) [27651 27661]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27607 28261]))                  
                :type "class")
                nil [23840 28261])
            ("register_writer" code nil nil [28262 28295])
            ("_OpenpyxlWriter" type
               (:superclasses ("_Openpyxl1Writer")
                :members 
                  ( ("engine" variable nil (reparse-symbol indented_block_body) [28343 28362]))                  
                :type "class")
                nil [28298 28363])
            ("register_writer" code nil nil [28364 28396])
            ("_Openpyxl2Writer" type
               (:documentation "
    Note: Support for OpenPyxl v2 is currently EXPERIMENTAL (GH7565).
    "
                :superclasses ("_Openpyxl1Writer")
                :members 
                  ( ("engine" variable nil (reparse-symbol indented_block_body) [28531 28551])
                    ("openpyxl_majorver" variable nil (reparse-symbol indented_block_body) [28556 28577])
                    ("write_cells" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28599 28603])
                            ("cells" variable nil (reparse-symbol function_parameters) [28605 28610])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [28612 28622])
                            ("startrow" variable nil (reparse-symbol function_parameters) [28629 28637])
                            ("startcol" variable nil (reparse-symbol function_parameters) [28641 28649]))                          )
                        (reparse-symbol indented_block_body) [28583 31411])
                    ("_convert_to_style_kwargs" function
                       (:documentation "
        Convert a style_dict to a set of kwargs suitable for initializing
        or updating-on-copy an openpyxl v2 style object
        Parameters
        ----------
        style_dict : dict
            A dict with zero or more of the following keys (or their synonyms).
                'font'
                'fill'
                'border' ('borders')
                'alignment'
                'number_format'
                'protection'
        Returns
        -------
        style_kwargs : dict
            A dict with the same, normalized keys as ``style_dict`` but each
            value has been replaced with a native openpyxl style object of the
            appropriate class.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31462 31465])
                            ("style_dict" variable nil (reparse-symbol function_parameters) [31467 31477]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31416 32637])
                    ("_convert_to_color" function
                       (:documentation "
        Convert ``color_spec`` to an openpyxl v2 Color object
        Parameters
        ----------
        color_spec : str, dict
            A 32-bit ARGB hex string, or a dict with zero or more of the
            following keys.
                'rgb'
                'indexed'
                'auto'
                'theme'
                'tint'
                'index'
                'type'
        Returns
        -------
        color : openpyxl.styles.Color
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32682 32685])
                            ("color_spec" variable nil (reparse-symbol function_parameters) [32687 32697]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32643 33365])
                    ("_convert_to_font" function
                       (:documentation "
        Convert ``font_dict`` to an openpyxl v2 Font object
        Parameters
        ----------
        font_dict : dict
            A dict with zero or more of the following keys (or their synonyms).
                'name'
                'size' ('sz')
                'bold' ('b')
                'italic' ('i')
                'underline' ('u')
                'strikethrough' ('strike')
                'color'
                'vertAlign' ('vertalign')
                'charset'
                'scheme'
                'family'
                'outline'
                'shadow'
                'condense'
        Returns
        -------
        font : openpyxl.styles.Font
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33409 33412])
                            ("font_dict" variable nil (reparse-symbol function_parameters) [33414 33423]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33371 34673])
                    ("_convert_to_stop" function
                       (:documentation "
        Convert ``stop_seq`` to a list of openpyxl v2 Color objects,
        suitable for initializing the ``GradientFill`` ``stop`` parameter.
        Parameters
        ----------
        stop_seq : iterable
            An iterable that yields objects suitable for consumption by
            ``_convert_to_color``.
        Returns
        -------
        stop : list of openpyxl.styles.Color
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [34717 34720])
                            ("stop_seq" variable nil (reparse-symbol function_parameters) [34722 34730]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34679 35204])
                    ("_convert_to_fill" function
                       (:documentation "
        Convert ``fill_dict`` to an openpyxl v2 Fill object
        Parameters
        ----------
        fill_dict : dict
            A dict with one or more of the following keys (or their synonyms),
                'fill_type' ('patternType', 'patterntype')
                'start_color' ('fgColor', 'fgcolor')
                'end_color' ('bgColor', 'bgcolor')
            or one or more of the following keys (or their synonyms).
                'type' ('fill_type')
                'degree'
                'left'
                'right'
                'top'
                'bottom'
                'stop'
        Returns
        -------
        fill : openpyxl.styles.Fill
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35248 35251])
                            ("fill_dict" variable nil (reparse-symbol function_parameters) [35253 35262]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35210 37193])
                    ("_convert_to_side" function
                       (:documentation "
        Convert ``side_spec`` to an openpyxl v2 Side object
        Parameters
        ----------
        side_spec : str, dict
            A string specifying the border style, or a dict with zero or more
            of the following keys (or their synonyms).
                'style' ('border_style')
                'color'
        Returns
        -------
        side : openpyxl.styles.Side
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37237 37240])
                            ("side_spec" variable nil (reparse-symbol function_parameters) [37242 37251]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37199 38147])
                    ("_convert_to_border" function
                       (:documentation "
        Convert ``border_dict`` to an openpyxl v2 Border object
        Parameters
        ----------
        border_dict : dict
            A dict with zero or more of the following keys (or their synonyms).
                'left'
                'right'
                'top'
                'bottom'
                'diagonal'
                'diagonal_direction'
                'vertical'
                'horizontal'
                'diagonalUp' ('diagonalup')
                'diagonalDown' ('diagonaldown')
                'outline'
        Returns
        -------
        border : openpyxl.styles.Border
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [38193 38196])
                            ("border_dict" variable nil (reparse-symbol function_parameters) [38198 38209]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38153 39420])
                    ("_convert_to_alignment" function
                       (:documentation "
        Convert ``alignment_dict`` to an openpyxl v2 Alignment object
        Parameters
        ----------
        alignment_dict : dict
            A dict with zero or more of the following keys (or their synonyms).
                'horizontal'
                'vertical'
                'text_rotation'
                'wrap_text'
                'shrink_to_fit'
                'indent'
        Returns
        -------
        alignment : openpyxl.styles.Alignment
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [39469 39472])
                            ("alignment_dict" variable nil (reparse-symbol function_parameters) [39474 39488]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39426 40075])
                    ("_convert_to_number_format" function
                       (:documentation "
        Convert ``number_format_dict`` to an openpyxl v2.1.0 number format
        initializer.
        Parameters
        ----------
        number_format_dict : dict
            A dict with zero or more of the following keys.
                'format_code' : str
        Returns
        -------
        number_format : str
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [40128 40131])
                            ("number_format_dict" variable nil (reparse-symbol function_parameters) [40133 40151]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40081 40745])
                    ("_convert_to_protection" function
                       (:documentation "
        Convert ``protection_dict`` to an openpyxl v2 Protection object.
        Parameters
        ----------
        protection_dict : dict
            A dict with zero or more of the following keys.
                'locked'
                'hidden'
        Returns
        -------
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [40794 40797])
                            ("protection_dict" variable nil (reparse-symbol function_parameters) [40799 40814]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40750 41219]))                  
                :type "class")
                nil [28399 41219])
            ("register_writer" code nil nil [41221 41254])
            ("_XlwtWriter" type
               (:superclasses ("ExcelWriter")
                :members 
                  ( ("engine" variable nil (reparse-symbol indented_block_body) [41293 41308])
                    ("supported_extensions" variable nil (reparse-symbol indented_block_body) [41313 41345])
                    ("__init__" function
                       (:suite 
                          ( ("xlwt" include nil (reparse-symbol indented_block_body) [41460 41471])
                            ("super" code nil (reparse-symbol indented_block_body) [41481 41537])
                            ("if" code nil (reparse-symbol indented_block_body) [41547 41599])
                            ("self" variable nil (reparse-symbol indented_block_body) [41607 41651])
                            ("self" variable nil (reparse-symbol indented_block_body) [41660 41727])
                            ("self" variable nil (reparse-symbol indented_block_body) [41736 41795]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41364 41368])
                            ("path" variable nil (reparse-symbol function_parameters) [41370 41374])
                            ("engine" variable nil (reparse-symbol function_parameters) [41376 41382])
                            ("encoding" variable nil (reparse-symbol function_parameters) [41389 41397])
                            ("engine_kwargs" variable nil (reparse-symbol function_parameters) [41404 41419]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41351 41817])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41831 41835]))                          
                        :documentation "
        Save workbook to disk.
        ")
                        (reparse-symbol indented_block_body) [41822 41934])
                    ("write_cells" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41955 41959])
                            ("cells" variable nil (reparse-symbol function_parameters) [41961 41966])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [41968 41978])
                            ("startrow" variable nil (reparse-symbol function_parameters) [41985 41993])
                            ("startcol" variable nil (reparse-symbol function_parameters) [41997 42005]))                          )
                        (reparse-symbol indented_block_body) [41939 43475])
                    ("_style_to_xlwt" function
                       (:documentation "helper which recursively generate an xlwt easy style string
        for example:

            hstyle = {\"font\": {\"bold\": True},
            \"border\": {\"top\": \"thin\",
                    \"right\": \"thin\",
                    \"bottom\": \"thin\",
                    \"left\": \"thin\"},
            \"align\": {\"horiz\": \"center\"}}
            will be converted to
            font: bold on; \\
                    border: top thin, right thin, bottom thin, left thin; \\
                    align: horiz center;
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [43516 43519])
                            ("item" variable nil (reparse-symbol function_parameters) [43521 43525])
                            ("firstlevel" variable nil (reparse-symbol function_parameters) [43527 43537])
                            ("field_sep" variable nil (reparse-symbol function_parameters) [43544 43553])
                            ("line_sep" variable nil (reparse-symbol function_parameters) [43582 43590]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43480 44770])
                    ("_convert_to_style" function
                       (:documentation "
        converts a style_dict to an xlwt style object
        Parameters
        ----------
        style_dict: style dictionary to convert
        num_format_str: optional number format string
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [44814 44817])
                            ("style_dict" variable nil (reparse-symbol function_parameters) [44819 44829])
                            ("num_format_str" variable nil (reparse-symbol function_parameters) [44831 44845]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44775 45410]))                  
                :type "class")
                nil [41257 45410])
            ("register_writer" code nil nil [45411 45439])
            ("_XlsxWriter" type
               (:superclasses ("ExcelWriter")
                :members 
                  ( ("engine" variable nil (reparse-symbol indented_block_body) [45478 45499])
                    ("supported_extensions" variable nil (reparse-symbol indented_block_body) [45504 45537])
                    ("__init__" function
                       (:suite 
                          ( ("xlsxwriter" include nil (reparse-symbol indented_block_body) [45700 45717])
                            ("super" code nil (reparse-symbol indented_block_body) [45727 45982])
                            ("self" variable nil (reparse-symbol indented_block_body) [45992 46046]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45556 45560])
                            ("path" variable nil (reparse-symbol function_parameters) [45562 45566])
                            ("engine" variable nil (reparse-symbol function_parameters) [45568 45574])
                            ("date_format" variable nil (reparse-symbol function_parameters) [45598 45609])
                            ("datetime_format" variable nil (reparse-symbol function_parameters) [45616 45631])
                            ("engine_kwargs" variable nil (reparse-symbol function_parameters) [45638 45653]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45543 46068])
                    ("save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46082 46086]))                          
                        :documentation "
        Save workbook to disk.
        ")
                        (reparse-symbol indented_block_body) [46073 46177])
                    ("write_cells" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46198 46202])
                            ("cells" variable nil (reparse-symbol function_parameters) [46204 46209])
                            ("sheet_name" variable nil (reparse-symbol function_parameters) [46211 46221])
                            ("startrow" variable nil (reparse-symbol function_parameters) [46228 46236])
                            ("startcol" variable nil (reparse-symbol function_parameters) [46240 46248]))                          )
                        (reparse-symbol indented_block_body) [46182 47697])
                    ("_convert_to_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47724 47728])
                            ("style_dict" variable nil (reparse-symbol function_parameters) [47730 47740])
                            ("num_format_str" variable nil (reparse-symbol function_parameters) [47742 47756]))                          
                        :documentation "
        converts a style_dict to an xlsxwriter format object
        Parameters
        ----------
        style_dict: style dictionary to convert
        num_format_str: optional number format string
        ")
                        (reparse-symbol indented_block_body) [47702 49180]))                  
                :type "class")
                nil [45442 49180])
            ("register_writer" code nil nil [49181 49209]))          
      :file "excel.py"
      :pointmax 49210
      :fsize 49209
      :lastmodtime '(21932 49374 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "parsers.py"
      :fsize 84411
      :lastmodtime '(21835 25771 0 0))
    (semanticdb-table "semanticdb-table"
      :file "common.py"
      :fsize 4935
      :lastmodtime '(21835 25771 0 0)))
  :file "!usr!local!lib!python2.7!site-packages!pandas-0.16.0_294_g45f69cd-py2.7-macosx-10.10-x86_64.egg!pandas!io!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
